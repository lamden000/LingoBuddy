package com.example.lingobuddypck.Services.QuizService.PassageQuiz

import android.content.Context
import android.graphics.Color
import android.os.CountDownTimer
import android.view.LayoutInflater
import android.view.View
import android.widget.LinearLayout
import android.widget.RadioButton
import android.widget.RadioGroup
import android.widget.ScrollView
import android.widget.TextView
import android.widget.Toast
import androidx.core.text.HtmlCompat
import androidx.core.view.isVisible
import androidx.lifecycle.LifecycleOwner
import com.example.lingobuddypck.Services.QuestionData
import com.example.lingobuddypck.Services.UserAnswer
import com.example.lingobuddypck.R
import com.example.lingobuddypck.Repository.FirebaseWordRepository
import com.example.lingobuddypck.data.DisplayableQuizContent
import com.example.lingobuddypck.data.QuizDisplayType
import com.example.lingobuddypck.utils.TaskManager
import com.example.lingobuddypck.utils.TopicUtils
import com.example.lingobuddypck.utils.enableSelectableSaveAction

class PassageQuizUIManager(
    private val context: Context,
    private val lifecycleOwner: LifecycleOwner,
    private val viewModel: PassageQuizViewModel, // ViewModel s·∫Ω cung c·∫•p DisplayableQuizContent
    private val wordRepository: FirebaseWordRepository, // Gi·ªØ l·∫°i n·∫øu v·∫´n d√πng tr·ª±c ti·∫øp
    private val views: PassageQuizViews,
    private val onShowNavigationBar: (() -> Unit)? = null,
    private val onHideNavigationBar: (() -> Unit)? = null
) {

    private var countdownTimer: CountDownTimer? = null
    private val questionViews = mutableMapOf<String, RadioGroup>()
    private val feedbackViews = mutableMapOf<String, TextView>()
    private var isShowingGradingResult = false
    private var originalButtonText: String
    private var currentQuizContent: DisplayableQuizContent? = null // L∆∞u tr·ªØ quiz hi·ªán t·∫°i

    init {
        originalButtonText = views.buttonStart.text.toString()
        setupClickListeners()
        setupObservers()
    }

    private fun setupClickListeners() {
        views.buttonStart.setOnClickListener {
            startNewQuizFlow() // ƒê·ªïi t√™n h√†m
        }

        views.buttonSubmit.setOnClickListener {
            if (isShowingGradingResult) {
                confirmGradingResult()
            } else {
                submitUserAnswers()
            }
        }
    }


    private fun startNewQuizFlow() {
        val topic = views.customTopicEditTxt?.text.toString().trim()
        val isCustom = topic.isNotBlank()
        viewModel.fetchAndPrepareQuiz(
            if (isCustom) topic else TopicUtils.getRandomTopicFromAssets(context),
            isCustom
        )
        resetUIForLoading()
    }

    private fun submitUserAnswers() {
        val userAnswers = mutableListOf<UserAnswer>()
        // L·∫•y c√¢u h·ªèi t·ª´ currentQuizContent thay v√¨ viewModel.passageQuizData
        val currentQuestions = currentQuizContent?.questions

        if (currentQuestions.isNullOrEmpty()) {
            Toast.makeText(context, "Kh√¥ng c√≥ c√¢u h·ªèi ƒë·ªÉ n·ªôp.", Toast.LENGTH_SHORT).show()
            return
        }

        var allAnswered = true
        currentQuestions.forEach { question ->
            val radioGroup = questionViews[question.id]
            val selectedRadioButtonId = radioGroup?.checkedRadioButtonId ?: -1
            if (selectedRadioButtonId != -1) {
                val selectedRadioButton = radioGroup?.findViewById<RadioButton>(selectedRadioButtonId)
                val answerKey = selectedRadioButton?.tag as? String
                if (answerKey != null) {
                    userAnswers.add(UserAnswer(question.id, answerKey))
                } else {
                    allAnswered = false // Tag kh√¥ng ƒë√∫ng ho·∫∑c kh√¥ng c√≥
                }
            } else {
                allAnswered = false // Ch∆∞a ch·ªçn ƒë√°p √°n
            }
        }

        if (allAnswered && userAnswers.size == currentQuestions.size) {
            // H√†m submitAnswers trong ViewModel c≈©ng c·∫ßn nh·∫≠n List<QuestionData>
            viewModel.submitAnswers(userAnswers, currentQuestions)
        } else {
            Toast.makeText(context, "Vui l√≤ng tr·∫£ l·ªùi t·∫•t c·∫£ c√°c c√¢u h·ªèi.", Toast.LENGTH_SHORT).show()
        }
    }

    private fun confirmGradingResult() {
        isShowingGradingResult = false
        currentQuizContent = null
        views.textViewResult.isVisible = false
        feedbackViews.values.forEach { it.isVisible = false }
        views.buttonSubmit.text ="N·ªôp b√†i"
        views.buttonSubmit.isVisible = false
        views.buttonStart.isVisible = true
        views.scrollView.isVisible = false
        views.initialStateContainer.isVisible = true
        views.passageTextView.text = "" // X√≥a n·ªôi dung ƒëo·∫°n vƒÉn
        views.passageTextView.visibility = View.GONE
        views.scrollView.alpha = 1f
        onShowNavigationBar?.invoke()
        viewModel.clearGradingResult()
        viewModel.clearQuizContent()
    }

    private fun setupObservers() {
        views.passageTextView.enableSelectableSaveAction(context) { selectedText, note ->
            wordRepository.saveWord(
                word = selectedText,
                note = note,
                onSuccess = {
                    Toast.makeText(context, "ƒê√£ l∆∞u \"$selectedText\"!", Toast.LENGTH_SHORT).show()
                },
                onFailure = {
                    Toast.makeText(context, "L·ªói khi l∆∞u t·ª´: ${it.message}", Toast.LENGTH_SHORT).show()
                }
            )
        }

        observeLoading()
        observeFetchingHint()
        observeDisplayableQuiz()
        observeGradingResult()
        observeErrorMessage()
    }

    private fun observeLoading() {
        viewModel.isLoading.observe(lifecycleOwner) { isLoading ->
            updateLoadingUI(isLoading)
            if (isLoading) startCountdown() else stopCountdown()
        }
    }

    private fun updateLoadingUI(isLoading: Boolean) {
        views.progressBar.isVisible = isLoading
        views.textViewLoadingHint.isVisible = isLoading
        views.textViewCountdown.isVisible = isLoading
        views.aiAvatar.isVisible = isLoading

        views.buttonStart.isEnabled = !isLoading
        views.buttonSubmit.isEnabled = !isLoading
        views.passageTextView.alpha = if (isLoading) 0.1f else 1f
        views.questionsContainer.alpha = if (isLoading) 0.1f else 1f


        if (!isLoading) {
            views.textViewCountdown.isVisible = false // ·∫®n countdown khi kh√¥ng loading
            // N·∫øu c√≥ quiz content v√† kh√¥ng ƒëang hi·ªÉn th·ªã k·∫øt qu·∫£ -> hi·ªÉn th·ªã n√∫t submit
            if (currentQuizContent != null && !isShowingGradingResult) {
                views.buttonSubmit.isVisible = true
                views.buttonSubmit.text = "N·ªôp b√†i"
                views.buttonStart.isVisible = false
                views.initialStateContainer.isVisible = false
                views.passageTextView.visibility = View.VISIBLE
                views.scrollView.visibility = View.VISIBLE
                onHideNavigationBar?.invoke()
            } else if (viewModel.gradingResult.value == null && viewModel.errorMessage.value != null) {
                // N·∫øu kh√¥ng c√≥ k·∫øt qu·∫£ v√† c√≥ l·ªói -> reset v·ªÅ m√†n h√¨nh b·∫Øt ƒë·∫ßu
                resetUIForStart()
            } else if (currentQuizContent == null && !isShowingGradingResult && viewModel.errorMessage.value == null) {
                // N·∫øu kh√¥ng c√≥ quiz, kh√¥ng c√≥ k·∫øt qu·∫£, kh√¥ng c√≥ l·ªói -> m√†n h√¨nh b·∫Øt ƒë·∫ßu
                resetUIForStart()
            }
        } else { // Khi ƒëang loading
            views.buttonSubmit.isVisible = false
            views.buttonStart.isVisible = false
            views.initialStateContainer.isVisible = false
            views.passageTextView.visibility = View.GONE
            views.scrollView.visibility = View.GONE
            onHideNavigationBar?.invoke()
        }
    }

    private fun observeFetchingHint() {
        viewModel.currentLoadingTaskType.observe(lifecycleOwner) { taskType ->
            val fetchingMessages = listOf(
                "‚åõ M·ªôt ch√∫t th√¥i... AI ƒëang g√£i ƒë·∫ßu nghƒ© ƒë·ªÅ b√†i.",
                "üß† ƒêang suy nghƒ©... ƒë·ª´ng r·ªùi ƒëi nh√©!",
                "ü§î ƒêang t·∫°o ƒë·ªÅ b√†i si√™u ng·∫ßu...",
                "üåÄ Tr√≠ tu·ªá nh√¢n t·∫°o ƒëang u·ªëng c√† ph√™...",
                "üìö ƒêang tham kh·∫£o t√†i li·ªáu cho b·∫°n ƒë√¢y."
            )
            val gradingMessages = listOf(
                "ü§ñ AI ƒëang ch·∫•m ƒëi·ªÉm nh∆∞ th·∫ßy gi√°o kh√≥ t√≠nh.",
                "üßò‚Äç‚ôÇÔ∏è ƒêang thi·ªÅn ƒë·ªÉ ƒë√°nh gi√° c√¥ng b·∫±ng.",
                "‚öñÔ∏è C√¢n ƒëo t·ª´ng ƒë√°p √°n ch√≠nh x√°c.",
                "üí° ƒêang ki·ªÉm tra t·ª´ng c√¢u tr·∫£ l·ªùi.",
                "üìâ Ch·∫•m xong sai l√† t·ª•t mood li·ªÅn √°..."
            )
            // D·ª±a v√†o taskType ƒë·ªÉ ch·ªçn message ph√π h·ª£p
            val text = when (taskType) {
                PassageQuizViewModel.LoadingTaskType.FETCHING_QUIZ -> fetchingMessages.random()
                PassageQuizViewModel.LoadingTaskType.GRADING -> gradingMessages.random()
                else -> "ƒêang x·ª≠ l√Ω..." // Default ho·∫∑c null
            }
            views.textViewLoadingHint.text = text
        }
    }

    private fun observeDisplayableQuiz() {
        viewModel.displayableQuizContent.observe(lifecycleOwner) { quizContent ->
            if (isShowingGradingResult) return@observe

            currentQuizContent = quizContent

            views.questionsContainer.removeAllViews()
            questionViews.clear()
            feedbackViews.clear()

            if (quizContent != null) {
                views.passageTextView.text = HtmlCompat.fromHtml(quizContent.passage, HtmlCompat.FROM_HTML_MODE_LEGACY)
                views.passageTextView.visibility = View.VISIBLE
                renderQuestions(quizContent.questions, quizContent.type) // Truy·ªÅn c·∫£ lo·∫°i quiz
                views.scrollView.isVisible = true
                views.initialStateContainer.isVisible = false
                onHideNavigationBar?.invoke()

                // C·∫≠p nh·∫≠t UI n√∫t b·∫•m sau khi c√≥ d·ªØ li·ªáu quiz
                if (viewModel.isLoading.value == false && !isShowingGradingResult) {
                    views.buttonSubmit.isVisible = true
                    views.buttonSubmit.text = "N·ªôp b√†i"
                    views.buttonStart.isVisible = false
                }

            } else {
                // N·∫øu quizContent l√† null (v√≠ d·ª• sau khi confirm k·∫øt qu·∫£ ho·∫∑c c√≥ l·ªói)
                views.passageTextView.text = ""
                views.passageTextView.visibility = View.GONE
                views.scrollView.isVisible = false
                views.buttonSubmit.isVisible = false
                // N·∫øu kh√¥ng loading v√† kh√¥ng c√≥ l·ªói -> reset v·ªÅ m√†n h√¨nh b·∫Øt ƒë·∫ßu
                if (viewModel.isLoading.value == false && viewModel.errorMessage.value == null) {
                    resetUIForStart()
                }
            }
        }
    }

    // Th√™m tham s·ªë quizType
    private fun renderQuestions(questions: List<QuestionData>, quizType: QuizDisplayType) {

        questions.forEachIndexed { index, q ->
            addQuestionToLayout(index, q, quizType) // Truy·ªÅn quizType
        }

        val spacer = View(context).apply {
            layoutParams = LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.MATCH_PARENT,
                context.resources.getDimensionPixelSize(R.dimen.scroll_bottom_padding)
            )
        }
        views.questionsContainer.addView(spacer)

        views.scrollView.post { views.scrollView.fullScroll(ScrollView.FOCUS_UP) }
    }

    private fun observeGradingResult() {
        viewModel.gradingResult.observe(lifecycleOwner) { result ->
            if (result == null) {
                views.textViewResult.isVisible = false
                return@observe
            }

            isShowingGradingResult = true
            val correct = result.score
            val total = result.total_questions
            val percentage = (correct.toFloat() / total * 100).toInt()

            views.textViewResult.text = "K·∫øt qu·∫£: $correct/$total c√¢u ƒë√∫ng."
            views.textViewResult.isVisible = true
            views.buttonSubmit.isVisible = true
            views.buttonSubmit.isEnabled = true
            views.buttonStart.isVisible = false
            views.scrollView.isVisible=true
            views.passageTextView.isVisible=true

            feedbackViews.values.forEach { it.isVisible = false }

            if (percentage >= 80) {
                TaskManager.markTaskCompleted(context, TaskManager.TaskType.PASSAGE_QUIZ_SCORE)
            }

            // Check for topic task completion
            val currentTopic = views.customTopicEditTxt?.text?.toString()
            if (currentTopic == TaskManager.getDailyTopic(context)) {
                TaskManager.markTaskCompleted(context, TaskManager.TaskType.PASSAGE_QUIZ_TOPIC)
            }

            result.feedback.forEach { (qid, fb) ->
                val question = currentQuizContent?.questions?.find { it.id == qid }
                val correctAnswerKey = question?.correct_answer
                val correctOptionText = question?.options?.get(correctAnswerKey) ?: ""

                val correctDisplay = if (correctAnswerKey != null) {
                    "${correctAnswerKey.uppercase()}. $correctOptionText"
                } else {
                    "N/A"
                }

                feedbackViews[qid]?.apply {
                    isVisible = true
                    if (fb.status == "correct") {
                        setTextColor(Color.parseColor("#228B22")) // Green
                        text = "‚úÖ Tr·∫£ l·ªùi ƒë√∫ng"
                    } else {
                        setTextColor(Color.parseColor("#B22222")) // Red
                        val explanationText = fb.explanation ?: "Kh√¥ng c√≥ gi·∫£i th√≠ch"
                        text =   "‚ùå Tr·∫£ l·ªùi sai.\nƒê√°p √°n ƒë√∫ng: $correctDisplay.\nGi·∫£i th√≠ch: $explanationText"
                    }
                }
            }

            views.scrollView.post { views.scrollView.fullScroll(ScrollView.FOCUS_UP) }
            views.buttonSubmit.text = "X√°c nh·∫≠n"
        }
    }

    private fun observeErrorMessage() {
        viewModel.errorMessage.observe(lifecycleOwner) { message ->
            message?.let {
                Toast.makeText(context, it, Toast.LENGTH_LONG).show()
                viewModel.clearErrorMessage() // X√≥a l·ªói sau khi hi·ªÉn th·ªã
                // N·∫øu kh√¥ng loading v√† kh√¥ng c√≥ quiz n√†o ƒëang hi·ªÉn th·ªã -> reset
                if (viewModel.isLoading.value == false && currentQuizContent == null) {
                    resetUIForStart()
                }
            }
        }
    }

    private fun startCountdown() {
        countdownTimer?.cancel()
        countdownTimer = object : CountDownTimer(60000, 1000) { // 60 gi√¢y
            override fun onTick(millisUntilFinished: Long) {
                views.textViewCountdown.text = "Th·ªùi gian ch·ªù: ${millisUntilFinished / 1000}s"
            }
            override fun onFinish() {
                views.textViewCountdown.text = "‚è≥ C√≥ v·∫ª h∆°i l√¢u... AI ƒëang c·ªë g·∫Øng!"
            }
        }.start()
    }

    private fun stopCountdown() {
        countdownTimer?.cancel()
        views.textViewCountdown.isVisible = false // ·∫®n khi d·ª´ng
    }

    private fun resetUIForStart() {
        isShowingGradingResult = false
        currentQuizContent = null
        views.questionsContainer.removeAllViews()
        questionViews.clear()
        feedbackViews.clear()
        views.passageTextView.text = ""
        views.passageTextView.visibility = View.GONE
        views.scrollView.isVisible = false
        views.buttonSubmit.isVisible = false
        views.textViewResult.isVisible = false
        views.progressBar.isVisible = false
        views.textViewLoadingHint.isVisible = false
        views.textViewCountdown.isVisible = false
        views.aiAvatar.isVisible = false
        views.passageTextView.alpha = 1f
        views.questionsContainer.alpha = 1f
        views.buttonStart.isVisible = true
        views.buttonStart.isEnabled = true
        views.initialStateContainer.isVisible = true
        views.recyclerView?.isVisible = true
        views.customTopicEditTxt?.isVisible = true
        views.customTopicEditTxt?.text?.clear()
        onShowNavigationBar?.invoke()
        views.buttonStart.text = originalButtonText
    }

    private fun resetUIForLoading() {
        isShowingGradingResult = false
        currentQuizContent = null
        views.passageTextView.text = ""
        views.passageTextView.visibility = View.GONE
        views.questionsContainer.removeAllViews()
        questionViews.clear()
        feedbackViews.clear()
        views.scrollView.isVisible = false
        views.buttonSubmit.isVisible = false
        views.buttonStart.isVisible = false
        views.initialStateContainer.isVisible = false
        views.textViewResult.isVisible = false
        feedbackViews.values.forEach { it.isVisible = false }
        onHideNavigationBar?.invoke()
        views.progressBar.isVisible = true
        views.textViewLoadingHint.isVisible = true
        views.textViewCountdown.isVisible = true
        views.aiAvatar.isVisible = true
    }

    // Th√™m tham s·ªë quizType
    private fun addQuestionToLayout(index: Int, questionData: QuestionData, quizType: QuizDisplayType) {
        val inflater = LayoutInflater.from(context)
        val questionView = inflater.inflate(R.layout.item_test_question, views.questionsContainer, false)

        val tvQuestionNumber = questionView.findViewById<TextView>(R.id.textViewQuestionNumber)
        val tvQuestionContent = questionView.findViewById<TextView>(R.id.textViewQuestionContent)
        val rgOptions = questionView.findViewById<RadioGroup>(R.id.radioGroupOptions)
        val tvFeedback = questionView.findViewById<TextView>(R.id.textViewFeedback)
        val blankIndex=index+1
        // X·ª≠ l√Ω hi·ªÉn th·ªã d·ª±a tr√™n quizType
        when (quizType) {
            QuizDisplayType.FILL_THE_BLANK -> {
                tvQuestionNumber.text = "Blank $blankIndex:"
                tvQuestionContent.visibility = View.GONE // ·∫®n n·ªôi dung c√¢u h·ªèi
            }
            QuizDisplayType.READING_COMPREHENSION -> {
                tvQuestionNumber.text = "Question $blankIndex:"
                tvQuestionContent.text = questionData.question_text // Hi·ªÉn th·ªã c√¢u h·ªèi ƒë·ªçc hi·ªÉu
                tvQuestionContent.visibility = View.VISIBLE
            }
        }

        // S·∫Øp x·∫øp v√† th√™m c√°c l·ª±a ch·ªçn
        val sortedOptions = questionData.options.entries.sortedBy { it.key }
        sortedOptions.forEach { (optionKey, optionText) ->
            val radioButton = RadioButton(context) // N√™n d√πng style t·ª´ theme n·∫øu c√≥
            radioButton.text = "${optionKey.uppercase()}. $optionText"
            radioButton.tag = optionKey
            radioButton.id = View.generateViewId()
            rgOptions.addView(radioButton)
        }
        views.questionsContainer.addView(questionView)
        questionViews[questionData.id] = rgOptions
        feedbackViews[questionData.id] = tvFeedback
        tvFeedback.isVisible = false // M·∫∑c ƒë·ªãnh ·∫©n feedback
    }
}
